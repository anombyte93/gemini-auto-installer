#!/bin/bash

# Student Codex - AI-Powered Learning Assistant
# Interactive menu system for students learning system administration
# Version: 3.0

# Colors
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'

# Base student context that instructs the AI how to behave
BASE_STUDENT_CONTEXT="You are helping a student who is learning system administration and cybersecurity.

INSTRUCTIONS FOR YOUR RESPONSES:
- Use simple, clear language appropriate for beginners
- Break down complex tasks into numbered steps
- For each command you suggest, explain WHAT it does and WHY it's needed
- Add clear warnings before any dangerous commands (sudo, rm, dd, etc.)
- Include verification steps at the end so the student can confirm success
- When relevant, remind the student to check official documentation
- Teach good security and system administration practices
- Be encouraging and patient - they are learning

"

# Check if open-codex is installed and configured
check_codex() {
    if ! command -v open-codex &> /dev/null; then
        echo -e "${RED}⚠️  Open Codex not found!${NC}"
        echo ""
        echo "Please run the installer first:"
        echo "  ./install-gemini-cli.sh"
        echo ""
        exit 1
    fi

    # Check if API key is configured
    if [ -z "$GOOGLE_GENERATIVE_AI_API_KEY" ]; then
        echo -e "${YELLOW}⚠️  Warning: API key not detected in environment${NC}"
        echo ""
        echo "You may need to set your API key:"
        echo "  export GOOGLE_GENERATIVE_AI_API_KEY='your-key-here'"
        echo ""
        echo "Or restart your terminal to load the key from ~/.bashrc"
        echo ""
        read -p "Continue anyway? (y/n): " continue_anyway
        if [[ ! "$continue_anyway" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        echo -e "${GREEN}✓ API key detected${NC}"
    fi

    # Quick test to see if open-codex works
    echo -e "${CYAN}Testing Open Codex...${NC}"
    if timeout 5 open-codex --version &>/dev/null; then
        echo -e "${GREEN}✓ Open Codex is working${NC}"
    else
        echo -e "${YELLOW}⚠️  Open Codex may have issues${NC}"
        echo ""
        echo "Common problems:"
        echo "  1. API key not set or invalid"
        echo "  2. Network connection issues"
        echo "  3. Open Codex not properly installed"
        echo ""
        echo "Try running directly: open-codex"
        echo ""
        read -p "Continue to menu? (y/n): " continue_menu
        if [[ ! "$continue_menu" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    echo ""
}

# Show how to use open-codex
show_usage_instructions() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}  ${BOLD}HOW TO USE THE AI ASSISTANT${NC}                      ${CYAN}║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Open Codex will now start. Here's how to use it:${NC}"
    echo ""
    echo -e "${GREEN}1. Wait for the AI to respond${NC}"
    echo "   (You'll see a prompt where you can type)"
    echo ""
    echo -e "${GREEN}2. Type your questions or requests${NC}"
    echo "   The AI already knows you're a student learning"
    echo ""
    echo -e "${GREEN}3. To execute suggested commands:${NC}"
    echo "   • AI will ask permission before running commands"
    echo "   • Type 'y' to approve or 'n' to decline"
    echo "   • READ commands before approving!"
    echo ""
    echo -e "${GREEN}4. To exit the AI session:${NC}"
    echo "   • Type 'exit' or press Ctrl+C"
    echo ""
    echo -e "${YELLOW}⚠️  If it gets stuck:${NC}"
    echo "   • Press Ctrl+C to stop"
    echo "   • You'll return to the menu"
    echo ""
    echo -e "${CYAN}Press Enter when ready...${NC}"
    read
}

# Launch open-codex with student context + specific prompt
launch_codex() {
    local prompt="$1"
    local full_prompt="${BASE_STUDENT_CONTEXT}${prompt}"

    clear
    show_usage_instructions

    echo ""
    echo -e "${GREEN}✓ Starting AI assistant...${NC}"
    echo ""

    # Add timeout handling and better error recovery
    if ! timeout 300 open-codex "$full_prompt" 2>/dev/null; then
        echo ""
        echo -e "${YELLOW}⚠️  Session ended or timed out${NC}"
        echo ""
    fi

    echo ""
    echo -e "${GREEN}✓ AI session complete${NC}"
    echo ""
    echo -e "${CYAN}Press Enter to return to menu...${NC}"
    read
}

# Main menu
show_menu() {
    clear
    echo ""
    echo -e "${BOLD}${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${CYAN}  Student Codex - AI Learning Assistant${NC}"
    echo -e "${BOLD}${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

    echo -e "${GREEN}🎓 Welcome, Student!${NC}"
    echo ""
    echo "AI-powered help for learning system administration."
    echo "Choose what you need help with:"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo "  1) 💬 General AI Help"
    echo "     Ask anything about system administration"
    echo ""
    echo "  2) 🔧 Install Software"
    echo "     Get help installing packages/applications"
    echo ""
    echo "  3) ⚙️  Configure System/Service"
    echo "     Configure services, settings, or files"
    echo ""
    echo "  4) 🐛 Fix Error or Problem"
    echo "     Troubleshoot errors and issues"
    echo ""
    echo "  5) 📚 Learn a Concept"
    echo "     Understand how something works"
    echo ""
    echo "  6) 🔍 Review My Work"
    echo "     Get AI feedback on your code/config"
    echo ""
    echo "  7) ✏️  Edit/Modify Files"
    echo "     AI can read and modify files on your system"
    echo ""
    echo "  8) 💡 Quick Question"
    echo "     Fast answer to a specific question"
    echo ""
    echo "  9) 📖 Documentation & Resources"
    echo "     Links to official documentation (non-AI)"
    echo ""
    echo "  a) 🚀 Advanced Mode - Auto-Approve"
    echo "     Use codex-smart with auto-approve (fast, no prompts)"
    echo ""
    echo "  0) 🚪 Exit"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -ne "${YELLOW}Enter your choice [0-9,a]: ${NC}"
    read choice

    case $choice in
        1) general_help ;;
        2) install_software ;;
        3) configure_system ;;
        4) fix_error ;;
        5) learn_concept ;;
        6) review_work ;;
        7) edit_files ;;
        8) quick_question ;;
        9) show_documentation ;;
        a|A) advanced_auto_approve ;;
        0) exit 0 ;;
        *)
            echo -e "${RED}Invalid choice. Please try again.${NC}"
            sleep 1
            show_menu
            ;;
    esac
}

# Option 1: General AI Help
general_help() {
    clear
    echo -e "${BOLD}${BLUE}💬 General AI Help${NC}\n"
    echo "Ask the AI anything about system administration, Linux, security, etc."
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  • How do I check disk space?"
    echo "  • What's the difference between apt and apt-get?"
    echo "  • How do I secure SSH?"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What do you need help with?${NC}"
    echo -e "${CYAN}(Press Enter to start general conversation)${NC}"
    echo ""
    read -p "> " user_input

    if [ -z "$user_input" ]; then
        prompt="TASK: The student needs general help with system administration.

Start by greeting them and asking what they're working on or what they need help with today."
    else
        prompt="QUESTION: ${user_input}

Provide a clear, educational explanation with practical examples if relevant."
    fi

    launch_codex "$prompt"
    show_menu
}

# Option 2: Install Software
install_software() {
    clear
    echo -e "${BOLD}${BLUE}🔧 Install Software${NC}\n"
    echo "Get AI help installing software with step-by-step guidance."
    echo ""
    echo -e "${YELLOW}⚠️  Remember: Check official docs first!${NC}"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What software do you want to install?${NC}"
    echo -e "${CYAN}Examples: Docker, Suricata, Python 3.11, PostgreSQL${NC}"
    echo ""
    read -p "> " software

    if [ -z "$software" ]; then
        echo -e "${RED}Please specify the software name.${NC}"
        sleep 2
        install_software
        return
    fi

    echo ""
    echo -e "${GREEN}What's your operating system?${NC}"
    echo -e "${CYAN}Examples: Ubuntu 22.04, Debian 11, macOS${NC}"
    read -p "> " os

    if [ -z "$os" ]; then
        os="my current OS"
    fi

    prompt="TASK: Install ${software} on ${os}

REQUIREMENTS:
1. Check if I should review official documentation first
2. Explain what ${software} is and why the installation steps are needed
3. Provide exact commands with explanations
4. Warn about any sudo/dangerous commands
5. Include verification steps to confirm installation worked

Please guide me through this installation."

    launch_codex "$prompt"
    show_menu
}

# Option 3: Configure System
configure_system() {
    clear
    echo -e "${BOLD}${BLUE}⚙️  Configure System/Service${NC}\n"
    echo "Get AI help configuring services, settings, or configuration files."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What do you want to configure?${NC}"
    echo -e "${CYAN}Examples: Suricata to monitor eth0, SSH for key-only auth${NC}"
    echo ""
    read -p "> " config_task

    if [ -z "$config_task" ]; then
        echo -e "${RED}Please specify what you want to configure.${NC}"
        sleep 2
        configure_system
        return
    fi

    prompt="TASK: Configure ${config_task}

REQUIREMENTS:
1. Remind me to check official documentation for configuration options
2. Explain which files need to be edited and why
3. Show exactly what changes to make
4. Warn about backing up config files first
5. Include steps to verify the configuration works
6. Explain what each setting does

Please guide me through this configuration."

    launch_codex "$prompt"
    show_menu
}

# Option 4: Fix Error
fix_error() {
    clear
    echo -e "${BOLD}${BLUE}🐛 Fix Error or Problem${NC}\n"
    echo "Get AI help troubleshooting errors and problems."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}Describe the error or problem:${NC}"
    echo -e "${CYAN}Include error messages, what you were trying to do, etc.${NC}"
    echo ""
    read -p "> " error_desc

    if [ -z "$error_desc" ]; then
        echo -e "${RED}Please describe the error or problem.${NC}"
        sleep 2
        fix_error
        return
    fi

    prompt="PROBLEM: ${error_desc}

REQUIREMENTS:
1. Help me understand what this error means in simple terms
2. Explain WHY this error happened
3. Provide step-by-step troubleshooting
4. Show exact commands to fix it with explanations
5. Include verification steps to confirm it's fixed
6. Teach me how to prevent this in the future

Please help me solve this problem."

    launch_codex "$prompt"
    show_menu
}

# Option 5: Learn a Concept
learn_concept() {
    clear
    echo -e "${BOLD}${BLUE}📚 Learn a Concept${NC}\n"
    echo "Get AI explanations of concepts, tools, or technologies."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What do you want to learn about?${NC}"
    echo -e "${CYAN}Examples: How SSH works, What is systemd, Docker containers${NC}"
    echo ""
    read -p "> " concept

    if [ -z "$concept" ]; then
        echo -e "${RED}Please specify what you want to learn.${NC}"
        sleep 2
        learn_concept
        return
    fi

    prompt="LEARNING GOAL: Understand ${concept}

REQUIREMENTS:
1. Explain ${concept} in simple, beginner-friendly terms
2. Use analogies or examples where helpful
3. Break down complex parts step-by-step
4. Include practical examples I can try
5. Suggest official documentation for deeper learning
6. Answer common questions beginners have about this

Please teach me about this concept."

    launch_codex "$prompt"
    show_menu
}

# Option 6: Review Work
review_work() {
    clear
    echo -e "${BOLD}${BLUE}🔍 Review My Work${NC}\n"
    echo "Get AI feedback on your code, configuration, or commands."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What do you want reviewed?${NC}"
    echo -e "${CYAN}Paste your code/config, or describe what you did${NC}"
    echo -e "${CYAN}(Type 'END' on a new line when finished, or just describe it)${NC}"
    echo ""

    work_content=""
    while IFS= read -r line; do
        if [[ "$line" == "END" ]]; then
            break
        fi
        work_content="${work_content}${line}"$'\n'
    done

    if [ -z "$work_content" ]; then
        echo -e "${RED}Please provide something to review.${NC}"
        sleep 2
        review_work
        return
    fi

    prompt="REVIEW REQUEST: Please review the following work from a student learning perspective

${work_content}

REQUIREMENTS:
1. Check for correctness and best practices
2. Explain what's done well
3. Point out any issues or improvements needed
4. Explain WHY changes are recommended
5. Teach me better approaches or patterns
6. Highlight any security concerns

Please provide educational feedback."

    launch_codex "$prompt"
    show_menu
}

# Option 7: Edit/Modify Files
edit_files() {
    clear
    echo -e "${BOLD}${BLUE}✏️  Edit/Modify Files${NC}\n"
    echo "AI can read and modify files on your system."
    echo ""
    echo -e "${YELLOW}⚠️  WARNING:${NC}"
    echo "• The AI will be able to make changes to your files"
    echo "• Always review changes before approving them"
    echo "• Consider backing up important files first"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What do you want to do with files?${NC}"
    echo -e "${CYAN}Examples:${NC}"
    echo "  • Edit /etc/hosts to add a new entry"
    echo "  • Create a new bash script in ~/scripts"
    echo "  • Modify config.yaml to change the port"
    echo "  • Read and explain what's in /var/log/syslog"
    echo ""
    read -p "> " file_task

    if [ -z "$file_task" ]; then
        echo -e "${RED}Please specify what you want to do with files.${NC}"
        sleep 2
        edit_files
        return
    fi

    prompt="TASK: ${file_task}

REQUIREMENTS:
1. Before making changes, show me what the current file looks like
2. Explain exactly what changes you're going to make and WHY
3. Ask for my approval before modifying any files
4. After changes, show me what you changed
5. Explain how to verify the changes worked
6. If editing config files, remind me to restart the relevant service

IMPORTANT SAFETY NOTES:
• Always back up important files before modifying them
• Read the file first to understand its current state
• Explain each change clearly so I can learn

Please help me with this file operation."

    launch_codex "$prompt"
    show_menu
}

# Option 8: Quick Question
quick_question() {
    clear
    echo -e "${BOLD}${BLUE}💡 Quick Question${NC}\n"
    echo "Get a fast answer to a specific question."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}What's your question?${NC}"
    echo ""
    read -p "> " question

    if [ -z "$question" ]; then
        echo -e "${RED}Please ask a question.${NC}"
        sleep 2
        quick_question
        return
    fi

    prompt="QUESTION: ${question}

Please provide a clear, concise answer with:
1. Direct answer to the question
2. Brief explanation of why
3. Example if applicable
4. Any important warnings or caveats"

    launch_codex "$prompt"
    show_menu
}

# Option 8: Documentation & Resources (NON-AI)
show_documentation() {
    clear
    echo -e "${BOLD}${BLUE}📖 Documentation & Resources${NC}\n"
    echo "Official documentation and learning resources (non-AI)"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${YELLOW}📚 Linux & System Administration:${NC}"
    echo ""
    echo "  Linux Command Line Basics:"
    echo "  https://ubuntu.com/tutorials/command-line-for-beginners"
    echo ""
    echo "  Ubuntu Server Guide:"
    echo "  https://ubuntu.com/server/docs"
    echo ""
    echo "  Debian Administrator's Handbook:"
    echo "  https://debian-handbook.info/"
    echo ""
    echo -e "${YELLOW}🔧 Common Tools:${NC}"
    echo ""
    echo "  Docker Documentation:"
    echo "  https://docs.docker.com/"
    echo ""
    echo "  Suricata User Guide:"
    echo "  https://suricata.readthedocs.io/"
    echo ""
    echo "  Wazuh Documentation:"
    echo "  https://documentation.wazuh.com/"
    echo ""
    echo -e "${YELLOW}🔒 Security:${NC}"
    echo ""
    echo "  OpenSSH Manual:"
    echo "  https://www.openssh.com/manual.html"
    echo ""
    echo "  OWASP Security Resources:"
    echo "  https://owasp.org/"
    echo ""
    echo -e "${YELLOW}💡 Best Practices:${NC}"
    echo ""
    echo "  • Always check official docs BEFORE using AI"
    echo "  • Verify AI suggestions against documentation"
    echo "  • Test in safe environments first"
    echo "  • Keep notes of what works"
    echo "  • Ask instructors when unsure"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${CYAN}Press Enter to return to menu...${NC}"
    read
    show_menu
}

# Option 9: Advanced Mode
advanced_mode() {
    clear
    echo -e "${BOLD}${BLUE}🚀 Advanced Mode${NC}\n"
    echo "Launch Open Codex directly without student learning context."
    echo ""
    echo -e "${YELLOW}Note:${NC} You'll have full control but won't get educational"
    echo "      prompts or beginner-friendly explanations."
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${GREEN}Options:${NC}"
    echo ""
    echo "  1) Launch Open Codex now"
    echo "  2) Show command to run it manually"
    echo "  0) Back to menu"
    echo ""
    read -p "Choice: " adv_choice

    case $adv_choice in
        1)
            echo ""
            echo -e "${GREEN}Launching Open Codex in advanced mode...${NC}"
            echo ""
            sleep 0.5
            open-codex
            echo ""
            echo -e "${CYAN}Press Enter to return to menu...${NC}"
            read
            show_menu
            ;;
        2)
            echo ""
            echo -e "${GREEN}To use Open Codex directly:${NC}"
            echo ""
            echo "  ${CYAN}open-codex${NC}"
            echo ""
            echo "Or with a direct prompt:"
            echo ""
            echo "  ${CYAN}open-codex \"Your prompt here\"${NC}"
            echo ""
            echo -e "${CYAN}Press Enter to return to menu...${NC}"
            read
            show_menu
            ;;
        0|*)
            show_menu
            ;;
    esac
}

# Option A: Advanced Mode with Auto-Approve
advanced_auto_approve() {
    clear
    echo -e "${BOLD}${YELLOW}⚠️  ADVANCED MODE - AUTO-APPROVE ⚠️${NC}\n"
    echo "This mode uses codex-smart with development preset:"
    echo ""
    echo -e "${GREEN}✓ Fastest experience - no permission prompts${NC}"
    echo -e "${GREEN}✓ AI can execute commands automatically${NC}"
    echo -e "${GREEN}✓ AI can modify files without asking${NC}"
    echo ""
    echo -e "${RED}⚠️  RISKS:${NC}"
    echo "• AI can make system changes without confirmation"
    echo "• Files can be modified or deleted automatically"
    echo "• Commands execute without your review"
    echo ""
    echo -e "${CYAN}Recommended for:${NC}"
    echo "• Quick prototyping and testing"
    echo "• Isolated development environments"
    echo "• When you fully trust the AI's actions"
    echo ""
    echo -e "${RED}NOT recommended for:${NC}"
    echo "• Production systems"
    echo "• Important files or projects"
    echo "• When you're learning and need to see each step"
    echo ""
    echo -e "${CYAN}────────────────────────────────────────────────────────${NC}"
    echo ""
    echo -e "${YELLOW}Do you want to continue? (yes/no): ${NC}"
    read confirm

    if [[ "$confirm" != "yes" ]]; then
        echo ""
        echo "Cancelled. Returning to menu..."
        sleep 1
        show_menu
        return
    fi

    echo ""
    echo -e "${CYAN}Options:${NC}"
    echo ""
    echo "  1) Launch codex-smart --preset development"
    echo "  2) Launch codex-smart --preset learning (safer)"
    echo "  3) Show available presets"
    echo "  0) Back to menu"
    echo ""
    read -p "Choice: " smart_choice

    case $smart_choice in
        1)
            echo ""
            echo -e "${GREEN}Launching codex-smart in development mode...${NC}"
            echo -e "${YELLOW}All actions will be auto-approved!${NC}"
            echo ""
            sleep 1
            codex-smart --preset development
            echo ""
            echo -e "${CYAN}Press Enter to return to menu...${NC}"
            read
            show_menu
            ;;
        2)
            echo ""
            echo -e "${GREEN}Launching codex-smart in learning mode...${NC}"
            echo -e "${CYAN}Will prompt for dangerous operations only${NC}"
            echo ""
            sleep 1
            codex-smart --preset learning
            echo ""
            echo -e "${CYAN}Press Enter to return to menu...${NC}"
            read
            show_menu
            ;;
        3)
            echo ""
            codex-smart --help
            echo ""
            echo -e "${CYAN}Press Enter to return to menu...${NC}"
            read
            show_menu
            ;;
        0|*)
            show_menu
            ;;
    esac
}

# Main execution
check_codex
show_menu
