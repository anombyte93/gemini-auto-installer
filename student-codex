#!/bin/bash

# Student Codex - Educational AI Assistant Wrapper
# Makes Open Codex beginner-friendly for students learning system administration
# Version: 1.0

set -e

# Colors for better readability
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
LEARNING_MODE="${STUDENT_LEARNING_MODE:-enabled}"
EXPLAIN_LEVEL="${STUDENT_EXPLAIN_LEVEL:-detailed}"

# Helper functions
print_header() {
    echo -e "\n${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${CYAN}  $1${NC}"
    echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
}

print_info() {
    echo -e "${BLUE}ℹ${NC}  $1"
}

print_success() {
    echo -e "${GREEN}✓${NC}  $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC}  $1"
}

print_tip() {
    echo -e "${CYAN}💡 TIP:${NC} $1"
}

print_learn() {
    echo -e "${GREEN}📚 LEARN:${NC} $1"
}

print_safety() {
    echo -e "${YELLOW}🔒 SAFETY:${NC} $1"
}

wait_for_user() {
    echo -e "\n${CYAN}Press Enter to continue...${NC}"
    read
}

ask_understanding() {
    echo -e "\n${CYAN}Do you understand what this means? (y/n/explain)${NC}"
    read -p "> " response
    if [[ "$response" == "n" ]] || [[ "$response" == "explain" ]]; then
        return 1
    fi
    return 0
}

# Main menu
show_menu() {
    clear
    print_header "Student Codex - AI Learning Assistant"

    echo -e "${BOLD}Welcome, Student!${NC} 🎓"
    echo ""
    echo "This tool helps you learn to use AI for system administration."
    echo "It explains what's happening at each step so you can learn."
    echo ""
    echo -e "${BOLD}Choose a task:${NC}"
    echo ""
    echo "  ${BOLD}1)${NC} 📖 Tutorial - Learn how to use AI assistants"
    echo "  ${BOLD}2)${NC} 🔧 Install Software (guided mode)"
    echo "  ${BOLD}3)${NC} ⚙️  Configure Service (with explanations)"
    echo "  ${BOLD}4)${NC} 🐛 Troubleshoot Error (step-by-step)"
    echo "  ${BOLD}5)${NC} 📝 Write Custom Prompt (with help)"
    echo "  ${BOLD}6)${NC} 🎯 Quick Tasks (common operations)"
    echo "  ${BOLD}7)${NC} 💬 Free Mode (use Open Codex directly)"
    echo "  ${BOLD}8)${NC} ⚙️  Settings"
    echo "  ${BOLD}9)${NC} ❓ Help & Tips"
    echo "  ${BOLD}0)${NC} 🚪 Exit"
    echo ""
    echo -e "${CYAN}Enter your choice [0-9]:${NC} "
    read -p "> " choice

    case $choice in
        1) show_tutorial ;;
        2) guided_install ;;
        3) guided_configure ;;
        4) guided_troubleshoot ;;
        5) custom_prompt_helper ;;
        6) quick_tasks ;;
        7) free_mode ;;
        8) settings_menu ;;
        9) show_help ;;
        0) exit 0 ;;
        *)
            print_warning "Invalid choice. Please try again."
            sleep 2
            show_menu
            ;;
    esac
}

# Tutorial mode
show_tutorial() {
    clear
    print_header "Tutorial: How to Use AI Assistants"

    echo -e "${BOLD}Lesson 1: What is Open Codex?${NC}"
    echo ""
    print_learn "Open Codex is an AI assistant that helps you write commands and code."
    echo "   Think of it as a knowledgeable friend who knows Linux commands."
    echo ""
    print_learn "You describe what you want in plain English, and it suggests commands."
    echo ""

    wait_for_user

    echo -e "${BOLD}Lesson 2: How to Write Good Prompts${NC}"
    echo ""
    print_tip "Be specific about what you want to achieve"
    echo "   ✗ Bad:  'install stuff'"
    echo "   ✓ Good: 'install Docker on Ubuntu 22.04'"
    echo ""
    print_tip "Mention your system and existing setup"
    echo "   ✓ Good: 'I have Suricata installed, now integrate with Wazuh'"
    echo ""
    print_tip "Ask for explanations when learning"
    echo "   ✓ Good: 'Explain what each command does before running it'"
    echo ""

    wait_for_user

    echo -e "${BOLD}Lesson 3: Check Official Documentation FIRST${NC}"
    echo ""
    print_safety "MANDATORY: Always check official docs before using AI!"
    echo ""
    print_learn "Why check documentation first?"
    echo "   1. Understand the official/recommended way to do things"
    echo "   2. Learn about system requirements and prerequisites"
    echo "   3. Discover potential issues or warnings"
    echo "   4. Verify the AI's suggestions against official sources"
    echo ""
    print_tip "Use AI to complement and clarify the docs, not replace them!"
    echo ""

    wait_for_user

    echo -e "${BOLD}Lesson 4: Evaluating AI Responses${NC}"
    echo ""
    print_safety "ALWAYS read commands before running them!"
    echo ""
    print_learn "Ask yourself these questions:"
    echo "   1. Does this match the official documentation?"
    echo "   2. Do I understand what this command does?"
    echo "   3. Does it modify system files? (be careful!)"
    echo "   4. Does it require sudo? (extra caution!)"
    echo "   5. Does it match what I asked for?"
    echo ""
    print_warning "If you're unsure, ask the AI to explain or ask your instructor!"
    echo ""

    wait_for_user

    echo -e "${BOLD}Lesson 5: Safe Learning Practices${NC}"
    echo ""
    print_success "DO:"
    echo "   • Check official documentation FIRST"
    echo "   • Read all commands before running"
    echo "   • Verify AI suggestions against docs"
    echo "   • Test in a safe environment first"
    echo "   • Ask questions when unsure"
    echo "   • Keep notes of what works"
    echo ""
    print_warning "DON'T:"
    echo "   • Skip reading official documentation"
    echo "   • Run commands you don't understand"
    echo "   • Skip reading sudo commands"
    echo "   • Assume the AI is always right"
    echo "   • Delete files without backups"
    echo ""

    wait_for_user

    print_success "Tutorial complete! You're ready to start learning."
    echo ""
    wait_for_user
    show_menu
}

# Guided software installation
guided_install() {
    clear
    print_header "Guided Software Installation"

    print_learn "Installing software means adding new programs to your system."
    echo "   Examples: Docker, Suricata, Python packages, etc."
    echo ""

    print_safety "IMPORTANT: Always check official documentation first!"
    echo "   Before using AI, visit the software's official docs to understand:"
    echo "   • System requirements"
    echo "   • Recommended installation method"
    echo "   • Known issues or warnings"
    echo ""
    print_tip "Use AI to complement the docs, not replace them!"
    echo ""

    echo -e "${CYAN}Have you checked the official documentation? (y/n)${NC}"
    read -p "> " checked_docs

    if [[ "$checked_docs" != "y" ]]; then
        echo ""
        print_warning "Please check the official documentation first, then come back!"
        echo ""
        echo "This ensures:"
        echo "  • You understand the software's purpose"
        echo "  • You know the recommended installation method"
        echo "  • You're aware of any system-specific requirements"
        echo ""
        wait_for_user
        show_menu
        return
    fi

    echo ""
    print_info "Great! Now I'll help you build an AI prompt to complement the docs."
    echo ""

    echo -e "${CYAN}What software do you want to install?${NC}"
    echo "Examples: Docker, Suricata, Python, MySQL, etc."
    read -p "> " software

    if [ -z "$software" ]; then
        print_warning "You need to specify software to install."
        sleep 2
        guided_install
        return
    fi

    echo ""
    echo -e "${CYAN}What's your operating system?${NC}"
    echo "Examples: Ubuntu 22.04, Debian 11, macOS, etc."
    read -p "> " os

    echo ""
    echo -e "${CYAN}Any special requirements or configurations?${NC}"
    echo "Examples: 'enable systemd service', 'add user to docker group', etc."
    echo "(Press Enter to skip)"
    read -p "> " requirements

    # Build the prompt
    clear
    print_header "Your AI Prompt"

    PROMPT="Install $software on $os"
    if [ ! -z "$requirements" ]; then
        PROMPT="$PROMPT. Also: $requirements"
    fi
    PROMPT="$PROMPT. Explain each step before showing commands. Show me exactly what to run."

    echo -e "${BOLD}Generated prompt:${NC}"
    echo ""
    echo -e "  ${CYAN}\"$PROMPT\"${NC}"
    echo ""

    print_learn "Why this prompt works:"
    echo "   • Specifies the software name: $software"
    echo "   • Mentions the OS: $os"
    [ ! -z "$requirements" ] && echo "   • Includes requirements: $requirements"
    echo "   • Asks for explanations (helps you learn!)"
    echo "   • Requests exact commands (clear instructions)"
    echo ""

    print_safety "What to look for in the response:"
    echo "   ✓ Commands that match your OS package manager"
    echo "   ✓ Clear explanations of what each command does"
    echo "   ✓ Verification steps to confirm installation"
    echo "   ⚠ Be careful with 'sudo' commands (they modify system)"
    echo ""

    echo -e "${CYAN}Ready to send this to Open Codex? (y/n)${NC}"
    read -p "> " confirm

    if [[ "$confirm" == "y" ]]; then
        echo ""
        print_info "Launching Open Codex with your prompt..."
        echo ""
        sleep 1
        open-codex "$PROMPT"
        echo ""
        print_success "Done! Review the AI's response carefully."
        wait_for_user
    fi

    show_menu
}

# Guided troubleshooting
guided_troubleshoot() {
    clear
    print_header "Guided Error Troubleshooting"

    print_learn "Troubleshooting means figuring out why something isn't working."
    echo "   AI can help analyze error messages and suggest fixes."
    echo ""

    print_tip "Have your error message ready (copy-paste works best!)"
    echo ""

    echo -e "${CYAN}What were you trying to do when you got the error?${NC}"
    echo "Example: 'starting Suricata service', 'installing Docker', etc."
    read -p "> " action

    echo ""
    echo -e "${CYAN}What's the error message you're seeing?${NC}"
    echo "Paste it here (or type 'file' to read from a file):"
    read -p "> " error

    if [ -z "$action" ] || [ -z "$error" ]; then
        print_warning "Please provide both the action and error message."
        sleep 2
        guided_troubleshoot
        return
    fi

    # Build troubleshooting prompt
    clear
    print_header "Your Troubleshooting Prompt"

    PROMPT="I'm a student learning system administration. I got an error while $action. The error is: $error. Please explain what this error means in simple terms, why it happened, and how to fix it. Show me the exact commands to run."

    echo -e "${BOLD}Generated prompt:${NC}"
    echo ""
    echo -e "  ${CYAN}\"$PROMPT\"${NC}"
    echo ""

    print_learn "Why this prompt works:"
    echo "   • States you're a student (AI will explain more)"
    echo "   • Provides context (what you were doing)"
    echo "   • Includes the actual error message"
    echo "   • Asks for simple explanations"
    echo "   • Requests the fix with exact commands"
    echo ""

    print_safety "When fixing errors:"
    echo "   ⚠ Understand the root cause before applying fixes"
    echo "   ⚠ Don't just run commands blindly"
    echo "   ⚠ Ask 'why did this happen?' to learn"
    echo "   ⚠ Verify the fix worked after applying it"
    echo ""

    echo -e "${CYAN}Ready to get help from Open Codex? (y/n)${NC}"
    read -p "> " confirm

    if [[ "$confirm" == "y" ]]; then
        echo ""
        print_info "Launching Open Codex..."
        echo ""
        sleep 1
        open-codex "$PROMPT"
        echo ""
        print_success "Review the explanation and solution carefully!"
        wait_for_user
    fi

    show_menu
}

# Custom prompt helper
custom_prompt_helper() {
    clear
    print_header "Custom Prompt Builder"

    print_learn "Let's build a good prompt together!"
    echo ""

    echo -e "${BOLD}What do you want to accomplish?${NC}"
    echo "Describe your goal in your own words:"
    read -p "> " goal

    echo ""
    echo -e "${BOLD}Prompt Enhancement Options:${NC}"
    echo ""
    echo "Add any of these to make your prompt better (y/n for each):"
    echo ""

    read -p "1) Request step-by-step explanations? (y/n): " opt_explain
    read -p "2) Ask for beginner-friendly language? (y/n): " opt_beginner
    read -p "3) Request command explanations? (y/n): " opt_commands
    read -p "4) Ask for verification steps? (y/n): " opt_verify
    read -p "5) Request safety warnings? (y/n): " opt_safety

    # Build enhanced prompt
    PROMPT="$goal"

    [[ "$opt_explain" == "y" ]] && PROMPT="$PROMPT Explain each step."
    [[ "$opt_beginner" == "y" ]] && PROMPT="I'm a student learning this. $PROMPT Use simple language."
    [[ "$opt_commands" == "y" ]] && PROMPT="$PROMPT Explain what each command does before showing it."
    [[ "$opt_verify" == "y" ]] && PROMPT="$PROMPT Include steps to verify it worked."
    [[ "$opt_safety" == "y" ]] && PROMPT="$PROMPT Warn me about any potentially dangerous commands."

    clear
    print_header "Your Enhanced Prompt"

    echo -e "${BOLD}Original goal:${NC}"
    echo "  $goal"
    echo ""
    echo -e "${BOLD}Enhanced prompt:${NC}"
    echo ""
    echo -e "  ${CYAN}\"$PROMPT\"${NC}"
    echo ""

    print_tip "This prompt is better because it:"
    [[ "$opt_explain" == "y" ]] && echo "   • Asks for step-by-step explanations"
    [[ "$opt_beginner" == "y" ]] && echo "   • Requests beginner-friendly language"
    [[ "$opt_commands" == "y" ]] && echo "   • Gets command explanations"
    [[ "$opt_verify" == "y" ]] && echo "   • Includes verification steps"
    [[ "$opt_safety" == "y" ]] && echo "   • Requests safety warnings"
    echo ""

    echo -e "${CYAN}Send this prompt to Open Codex? (y/n)${NC}"
    read -p "> " confirm

    if [[ "$confirm" == "y" ]]; then
        echo ""
        print_info "Launching Open Codex..."
        echo ""
        sleep 1
        open-codex "$PROMPT"
        echo ""
        wait_for_user
    fi

    show_menu
}

# Quick tasks menu
quick_tasks() {
    clear
    print_header "Quick Tasks"

    echo -e "${BOLD}Common tasks with pre-built prompts:${NC}"
    echo ""
    echo "  1) Check if a service is running"
    echo "  2) View log files for troubleshooting"
    echo "  3) Check system resource usage"
    echo "  4) List installed packages"
    echo "  5) Update system packages"
    echo "  6) Check network connectivity"
    echo "  0) Back to main menu"
    echo ""
    read -p "Choose a task [0-6]: > " task

    case $task in
        1)
            read -p "Which service? (e.g., docker, suricata): " service
            PROMPT="I'm a student. Show me how to check if $service service is running. Explain what the command does and what the output means."
            ;;
        2)
            read -p "Which service/app? (e.g., suricata, wazuh): " app
            PROMPT="I'm a student. Show me how to view recent log files for $app. Explain where logs are stored and how to read them."
            ;;
        3)
            PROMPT="I'm a student. Show me how to check system resource usage (CPU, RAM, disk). Explain what each metric means."
            ;;
        4)
            PROMPT="I'm a student. Show me how to list all installed packages on this system. Explain the command."
            ;;
        5)
            PROMPT="I'm a student. Show me the safe way to update system packages. Explain each step and any warnings I should know."
            ;;
        6)
            PROMPT="I'm a student. Show me how to check network connectivity and diagnose network issues. Explain the tools used."
            ;;
        0)
            show_menu
            return
            ;;
        *)
            print_warning "Invalid choice"
            sleep 1
            quick_tasks
            return
            ;;
    esac

    if [ ! -z "$PROMPT" ]; then
        echo ""
        print_info "Running prompt: $PROMPT"
        echo ""
        sleep 1
        open-codex "$PROMPT"
        echo ""
        wait_for_user
        quick_tasks
    fi
}

# Guided configuration
guided_configure() {
    clear
    print_header "Guided Service Configuration"

    print_learn "Configuration means setting up how a program behaves."
    echo "   This usually involves editing configuration files."
    echo ""

    print_safety "IMPORTANT: Check the official configuration documentation first!"
    echo "   Before making changes, review:"
    echo "   • Available configuration options"
    echo "   • Recommended settings for your use case"
    echo "   • Configuration file format and syntax"
    echo ""

    echo -e "${CYAN}Have you reviewed the configuration documentation? (y/n)${NC}"
    read -p "> " checked_docs

    if [[ "$checked_docs" != "y" ]]; then
        echo ""
        print_warning "Please check the configuration docs first!"
        echo "This prevents configuration errors and helps you understand the options."
        echo ""
        wait_for_user
        show_menu
        return
    fi

    echo ""
    echo -e "${CYAN}What service/software do you want to configure?${NC}"
    read -p "> " service

    echo ""
    echo -e "${CYAN}What do you want to configure?${NC}"
    echo "Example: 'monitor eth0 interface', 'use 4 CPU threads', etc."
    read -p "> " config_goal

    PROMPT="I'm a student learning system administration. I want to configure $service to $config_goal. Show me which configuration file to edit, what changes to make, and explain why each setting matters. Include steps to verify the configuration works."

    clear
    print_header "Your Configuration Prompt"

    echo -e "${BOLD}Generated prompt:${NC}"
    echo ""
    echo -e "  ${CYAN}\"$PROMPT\"${NC}"
    echo ""

    print_safety "When editing configuration files:"
    echo "   ⚠ Always backup the original file first!"
    echo "   ⚠ Use 'sudo' carefully - config files are usually protected"
    echo "   ⚠ Check syntax after editing"
    echo "   ⚠ Restart the service to apply changes"
    echo ""

    echo -e "${CYAN}Send to Open Codex? (y/n)${NC}"
    read -p "> " confirm

    if [[ "$confirm" == "y" ]]; then
        echo ""
        open-codex "$PROMPT"
        echo ""
        wait_for_user
    fi

    show_menu
}

# Free mode (direct access to Open Codex)
free_mode() {
    clear
    print_header "Free Mode - Direct AI Access"

    print_info "You're about to use Open Codex directly."
    echo ""
    print_tip "Remember to:"
    echo "   • Be specific in your prompts"
    echo "   • Ask for explanations when learning"
    echo "   • Read commands before running them"
    echo "   • Mention you're a student for simpler explanations"
    echo ""

    echo -e "${CYAN}Enter your prompt (or 'back' to return):${NC}"
    read -p "> " prompt

    if [[ "$prompt" == "back" ]] || [[ -z "$prompt" ]]; then
        show_menu
        return
    fi

    echo ""
    print_info "Launching Open Codex..."
    echo ""
    sleep 1
    open-codex "$prompt"
    echo ""

    echo -e "${CYAN}Ask another question? (y/n)${NC}"
    read -p "> " again

    if [[ "$again" == "y" ]]; then
        free_mode
    else
        show_menu
    fi
}

# Settings menu
settings_menu() {
    clear
    print_header "Settings"

    echo -e "${BOLD}Current settings:${NC}"
    echo ""
    echo "  Learning Mode: $LEARNING_MODE"
    echo "  Explain Level: $EXPLAIN_LEVEL"
    echo ""
    echo "1) Toggle Learning Mode (on/off)"
    echo "2) Change Explain Level (brief/detailed)"
    echo "0) Back to main menu"
    echo ""
    read -p "Choose [0-2]: > " setting

    case $setting in
        1)
            if [[ "$LEARNING_MODE" == "enabled" ]]; then
                export STUDENT_LEARNING_MODE="disabled"
                LEARNING_MODE="disabled"
                print_success "Learning mode disabled"
            else
                export STUDENT_LEARNING_MODE="enabled"
                LEARNING_MODE="enabled"
                print_success "Learning mode enabled"
            fi
            sleep 2
            settings_menu
            ;;
        2)
            if [[ "$EXPLAIN_LEVEL" == "detailed" ]]; then
                export STUDENT_EXPLAIN_LEVEL="brief"
                EXPLAIN_LEVEL="brief"
                print_success "Switched to brief explanations"
            else
                export STUDENT_EXPLAIN_LEVEL="detailed"
                EXPLAIN_LEVEL="detailed"
                print_success "Switched to detailed explanations"
            fi
            sleep 2
            settings_menu
            ;;
        0)
            show_menu
            ;;
        *)
            settings_menu
            ;;
    esac
}

# Help menu
show_help() {
    clear
    print_header "Help & Tips"

    echo -e "${BOLD}Quick Reference:${NC}"
    echo ""
    echo -e "${BOLD}Writing Good Prompts:${NC}"
    print_tip "Be specific: 'Install Docker on Ubuntu' not 'install stuff'"
    print_tip "Mention your OS: 'on Ubuntu 22.04' or 'on macOS'"
    print_tip "Ask for explanations: 'explain what each command does'"
    print_tip "State you're learning: 'I'm a student, use simple terms'"
    echo ""

    echo -e "${BOLD}Safety Reminders:${NC}"
    print_safety "Read all commands before running them"
    print_safety "Be extra careful with 'sudo' commands"
    print_safety "Backup config files before editing"
    print_safety "Test in a safe environment when possible"
    echo ""

    echo -e "${BOLD}Common Prompt Templates:${NC}"
    echo "  Install: 'Install [software] on [OS]. Explain each step.'"
    echo "  Configure: 'Configure [service] to [goal]. Show config changes.'"
    echo "  Troubleshoot: 'Fix error: [error message]. Explain why it happened.'"
    echo "  Learn: 'Explain how [concept] works in simple terms.'"
    echo ""

    echo -e "${BOLD}Glossary:${NC}"
    echo "  • sudo: Run command as administrator (be careful!)"
    echo "  • apt/yum: Package managers (install software)"
    echo "  • systemctl: Manage system services"
    echo "  • config file: File that controls program settings"
    echo "  • daemon: Background service"
    echo "  • log file: Record of program activity"
    echo ""

    wait_for_user
    show_menu
}

# Check if open-codex is installed
if ! command -v open-codex &> /dev/null; then
    clear
    print_header "Error: Open Codex Not Found"
    print_warning "Open Codex CLI is not installed or not in PATH"
    echo ""
    echo "Please run the installer first:"
    echo "  ./install-gemini-cli.sh"
    echo ""
    exit 1
fi

# Start the application
show_menu
